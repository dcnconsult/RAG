########## Frontend build stage ##########
FROM node:20-bullseye AS frontend-builder

WORKDIR /frontend
COPY frontend/package*.json ./
# Install full deps (build needs devDependencies); use install to sync lock
RUN npm install --no-audit --no-fund
COPY frontend/ ./
# Build: prefer vite build even if TypeScript type checks fail (MVP)
# If "npm run build" fails due to TS errors, fall back to vite build which doesn't type-check
ENV VITE_API_BASE_URL=/api/v1
RUN npm run -s build || (echo "Type errors detected, falling back to vite build for MVP" && npx --yes vite build)

########## Final runtime (pgvector + Python + nginx) ##########
FROM pgvector/pgvector:pg15

# PostgreSQL defaults (MVP credentials)
ENV POSTGRES_DB=rag_db \
    POSTGRES_USER=rag_user \
    POSTGRES_PASSWORD=rag_password \
    POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"

# Python/Poetry environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# System dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        python3-pip \
        python3-venv \
        build-essential \
        curl \
        libpq-dev \
        gcc \
        g++ \
        libffi-dev \
        libssl-dev \
        pkg-config \
        git \
        supervisor \
        nginx \
        libgomp1 \
        libmagic1 \
    && rm -rf /var/lib/apt/lists/*

# Python venv + Poetry
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --upgrade pip && pip install poetry==1.7.1 && poetry config virtualenvs.create false

# Workdir for backend
WORKDIR /app

# Install backend dependencies first (better layer caching)
COPY backend/pyproject.toml backend/poetry.lock* ./
RUN poetry install --only=main

# Copy backend code
COPY backend/ .

# Ensure uploads directory exists
RUN mkdir -p uploads && chmod 755 uploads

# Copy frontend build artifacts to standard nginx directory
RUN mkdir -p /usr/share/nginx/html
COPY --from=frontend-builder /frontend/dist/ /usr/share/nginx/html/
RUN chown -R www-data:www-data /usr/share/nginx/html/

# Nginx configuration for SPA + API proxy
RUN rm -f /etc/nginx/sites-enabled/default || true
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Include DB init SQL inside the image for one-shot runs
COPY database/init.sql /docker-entrypoint-initdb.d/init.sql

# Create non-root user for app files
RUN adduser --disabled-password --gecos '' appuser && chown -R appuser:appuser /app

# Use supervisord to orchestrate Postgres, Nginx, and Uvicorn
COPY backend/docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

EXPOSE 5432 8000 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD pg_isready -U $POSTGRES_USER -d $POSTGRES_DB || exit 1

CMD ["/usr/bin/supervisord"]
